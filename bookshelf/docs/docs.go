// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/add-book": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookshelf"
                ],
                "summary": "Add a new book",
                "parameters": [
                    {
                        "description": "Book Data",
                        "name": "BookInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/books.Book"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sucess",
                        "schema": {
                            "$ref": "#/definitions/commons.ResultMSG"
                        }
                    },
                    "400": {
                        "description": "Bad Requests",
                        "schema": {
                            "$ref": "#/definitions/commons.ErrorMSG"
                        }
                    }
                }
            }
        },
        "/get-book/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookshelf"
                ],
                "summary": "Get book Data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Book ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sucess",
                        "schema": {
                            "$ref": "#/definitions/books.MockBook"
                        }
                    },
                    "400": {
                        "description": "Bad Requests",
                        "schema": {
                            "$ref": "#/definitions/commons.ErrorMSG"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Etc."
                ],
                "summary": "Server status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/sample-token": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Etc."
                ],
                "summary": "Get sample token for test",
                "responses": {
                    "200": {
                        "description": "{\"token\": \"...\"}",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/search-book": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookshelf"
                ],
                "summary": "Search book",
                "parameters": [
                    {
                        "description": "Book Data",
                        "name": "BookInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/books.Book"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Requests",
                        "schema": {
                            "$ref": "#/definitions/commons.ErrorMSG"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "books.Book": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string",
                    "example": "Bob kane"
                },
                "edition": {
                    "type": "integer",
                    "example": 999
                },
                "name": {
                    "type": "string",
                    "example": "Batman"
                },
                "price": {
                    "description": "1200 = $12.00",
                    "type": "integer",
                    "example": 14000
                },
                "publisher": {
                    "type": "string",
                    "example": "시공사"
                },
                "unit": {
                    "description": "USD, KRW",
                    "type": "string",
                    "example": "KRW"
                }
            }
        },
        "books.MockBook": {
            "type": "object",
            "properties": {
                "method": {
                    "type": "string",
                    "example": "GET"
                },
                "page": {
                    "type": "string",
                    "example": "1"
                },
                "where": {
                    "type": "string",
                    "example": "getbook"
                }
            }
        },
        "commons.ErrorMSG": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "missing or malformed jwt"
                }
            }
        },
        "commons.ResultMSG": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "0000"
                },
                "message": {
                    "type": "string",
                    "example": "Sucess"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.0.1",
	Host:        "",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "Bookshelf API",
	Description: "My sample bookshelf server.\n",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
