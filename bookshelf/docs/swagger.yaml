basePath: /api/v1
definitions:
  books.Book:
    properties:
      author:
        example: Bob kane
        type: string
      edition:
        example: 999
        type: integer
      name:
        example: Batman
        type: string
      price:
        description: 1200 = $12.00
        example: 14000
        type: integer
      publisher:
        example: 시공사
        type: string
      unit:
        description: USD, KRW
        example: KRW
        type: string
    type: object
  books.MockBook:
    properties:
      method:
        example: GET
        type: string
      page:
        example: "1"
        type: string
      where:
        example: getbook
        type: string
    type: object
  commons.ErrorMSG:
    properties:
      message:
        example: missing or malformed jwt
        type: string
    type: object
  commons.ResultMSG:
    properties:
      code:
        example: "0000"
        type: string
      message:
        example: Sucess
        type: string
    type: object
info:
  contact: {}
  description: |
    My sample bookshelf server.
  title: Bookshelf API
  version: 0.0.1
paths:
  /add-book:
    post:
      consumes:
      - application/json
      parameters:
      - description: Book Data
        in: body
        name: BookInfo
        required: true
        schema:
          $ref: '#/definitions/books.Book'
      produces:
      - application/json
      responses:
        "200":
          description: Sucess
          schema:
            $ref: '#/definitions/commons.ResultMSG'
        "400":
          description: Bad Requests
          schema:
            $ref: '#/definitions/commons.ErrorMSG'
      security:
      - ApiKeyAuth: []
      summary: Add a new book
      tags:
      - Bookshelf
  /get-book/{id}:
    get:
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Sucess
          schema:
            $ref: '#/definitions/books.MockBook'
        "400":
          description: Bad Requests
          schema:
            $ref: '#/definitions/commons.ErrorMSG'
      security:
      - ApiKeyAuth: []
      summary: Get book Data
      tags:
      - Bookshelf
  /health:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Server status
      tags:
      - Etc.
  /sample-token:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: '{"token": "..."}'
          schema:
            type: string
      summary: Get sample token for test
      tags:
      - Etc.
  /search-book:
    post:
      consumes:
      - application/json
      parameters:
      - description: Book Data
        in: body
        name: BookInfo
        required: true
        schema:
          $ref: '#/definitions/books.Book'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Requests
          schema:
            $ref: '#/definitions/commons.ErrorMSG'
      security:
      - ApiKeyAuth: []
      summary: Search book
      tags:
      - Bookshelf
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
